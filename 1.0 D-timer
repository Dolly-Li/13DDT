import tkinter as tk
from tkinter import messagebox
from datetime import datetime

class DTimerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("D-TIMER")
        self.root.geometry("600x420")
        self.root.configure(bg="#c6d4c6")

        self.running = False
        self.paused = False
        self.total_seconds = 5 * 60  # original 5 mins

        self.create_login_page()
        self.create_timer_page()
        self.update_clock()

    def create_login_page(self):
        self.login_frame = tk.Frame(self.root, bg="#c6d4c6")
        self.login_frame.pack()

        # Top icon bar
        top_frame = tk.Frame(self.login_frame, bg="#c6d4c6")
        top_frame.pack(fill='x', pady=10, padx=20)

        tk.Button(top_frame, text="Weather").pack(side="left")
        tk.Button(top_frame, text="Setting").pack(side="left")
        tk.Button(top_frame, text="On").pack(side="left")
        tk.Button(top_frame, text="WiFi").pack(side="left")

        self.time_label = tk.Label(top_frame, bg="#c6d4c6", font=("Arial", 14, "bold"))
        self.time_label.pack(side="right")
        self.date_label = tk.Label(top_frame, bg="#c6d4c6", font=("Arial", 10))
        self.date_label.pack(side="right")

        # Login visual
        tk.Label(self.login_frame, text="D-TIMER", font=("Arial", 32, "bold"), bg="#c6d4c6").pack()
        tk.Label(self.login_frame, text="ðŸ‘¤", font=("Arial", 32), bg="#c6d4c6").pack()
        tk.Label(self.login_frame, text="Login", font=("Arial", 16, "bold"), bg="#c6d4c6").pack(pady=5)

        self.username_entry = tk.Entry(self.login_frame, font=("Arial", 12))
        self.username_entry.pack(pady=5, ipadx=50, ipady=5)

        self.password_entry = tk.Entry(self.login_frame, font=("Arial", 12), show="*")
        self.password_entry.pack(pady=5, ipadx=50, ipady=5)

        tk.Button(self.login_frame, text="Login", command=self.attempt_login).pack(pady=10)
        tk.Label(self.login_frame, text="*Forgot the password?", font=("Arial", 9), bg="#c6d4c6").pack()
        tk.Label(self.login_frame, text="COME AND USE THE TIMER\nUSING TIMER WISELY TO MANAGE YOUR TIME",
                 font=("Arial", 7), bg="#c6d4c6", justify="left").place(x=20, y=380)

    def update_clock(self):
        now = datetime.now()
        self.time_label.config(text=now.strftime("%H:%M"))
        self.date_label.config(text=now.strftime("%A\n%B %d"))
        self.root.after(1000, self.update_clock)

    def attempt_login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if username == "dolly" and password == "1234":
            messagebox.showinfo("Login Successful", f"Welcome, {username}!")
            self.login_frame.pack_forget()
            self.timer_frame.pack()
        else:
            messagebox.showerror("Login Failed","Username:dolly","Password:1234")

    def create_timer_page(self):
        self.timer_frame = tk.Frame(self.root, bg="#c6d4c6")

        self.clock_label = tk.Label(self.timer_frame, font=("Arial", 12), bg="#c6d4c6", anchor="e")
        self.clock_label.pack(pady=10, anchor="ne", padx=20)

        self.timer_label = tk.Label(self.timer_frame, text=self.format_time(), font=("Arial", 48), bg="#c6d4c6")
        self.timer_label.pack(pady=10)

        time_input_frame = tk.Frame(self.timer_frame, bg="#c6d4c6")
        time_input_frame.pack(pady=5)

        top_frame = tk.Frame(self.timer_frame, bg="#c6d4c6")
        top_frame.pack(fill='x', pady=10, padx=20)

        tk.Button(top_frame, text="Weather").pack(side="left")
        tk.Button(top_frame, text="Setting").pack(side="left")
        tk.Button(top_frame, text="On").pack(side="left")
        tk.Button(top_frame, text="WiFi").pack(side="left")

        self.clock_label = tk.Label(top_frame, font=("Helvetica", 12), bg="#c6d4c6", anchor="e")
        self.clock_label.pack(side="right")
  
        tk.Label(time_input_frame, text="Hours:", bg="#c6d4c6").grid(row=0, column=0)
        self.hour_entry = tk.Entry(time_input_frame, width=3)
        self.hour_entry.grid(row=0, column=1)

        tk.Label(time_input_frame, text="Minutes:", bg="#c6d4c6").grid(row=0, column=2)
        self.minute_entry = tk.Entry(time_input_frame, width=3)
        self.minute_entry.grid(row=0, column=3)

        tk.Label(time_input_frame, text="Seconds:", bg="#c6d4c6").grid(row=0, column=4)
        self.second_entry = tk.Entry(time_input_frame, width=3)
        self.second_entry.grid(row=0, column=5)

        btn_frame = tk.Frame(self.timer_frame, bg="#c6d4c6")
        btn_frame.pack(pady=10)
       
        tk.Button(btn_frame, text="Start", command=self.start_timer).grid(row=0, column=0, padx=5)
        self.pause_button = tk.Button(btn_frame, text="Pause", command=self.toggle_pause)
        self.pause_button.grid(row=0, column=1, padx=5)
        tk.Button(btn_frame, text="Reset", command=self.reset_timer).grid(row=0, column=2, padx=5)

        tk.Label(self.timer_frame, text="LET'S GO!!!\nHOW LONG CAN U BE CONCENTRATED?",
                 font=("Arial", 10), bg="#c6d4c6").pack(pady=10)

    def format_time(self):
        mins, secs = divmod(self.total_seconds, 60)
        hours, mins = divmod(mins, 60)
        return f"{hours:02}:{mins:02}:{secs:02}"

    def start_timer(self):
        if not self.running:
            self.running = True
            self.paused = False
            self.countdown()

    def toggle_pause(self):
        if self.running:
            self.paused = not self.paused
            self.pause_button.config(text="Resume" if self.paused else "Pause")
            if not self.paused:
                self.countdown()

    def reset_timer(self):
        try:
            h = int(self.hour_entry.get()) if self.hour_entry.get() else 0
            m = int(self.minute_entry.get()) if self.minute_entry.get() else 0
            s = int(self.second_entry.get()) if self.second_entry.get() else 0
            self.total_seconds = h * 3600 + m * 60 + s
            self.running = False
            self.paused = False
            self.pause_button.config(text="Pause")
            self.timer_label.config(text=self.format_time())
        except ValueError:
            self.timer_label.config(text="Invalid Input")

    def countdown(self):
        if not self.running or self.paused:
            return
        if self.total_seconds <= 0:
            self.running = False
            self.timer_label.config(text="DONE!")
            return
        self.total_seconds -= 1
        self.timer_label.config(text=self.format_time())
        self.root.after(1000, self.countdown)

# Run 
root = tk.Tk()
app = DTimerApp(root)
root.mainloop()
